# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master, feature/20201103 ]
  pull_request:
    branches: [ master, feature/20201103 ]

env:
  VNC_IMAGE_NAME: ubuntu-xfce-vnc
  ROS_IMAGE_NAME: ros-ubuntu-xfce-vnc
  ROS_AWS_SAMPLE_IMAGE_NAME: ros-aws-sample
  ROS_VSCODE_IMAGE_NAME: ros-ubuntu-vscode
  VSCODE_CHROME_IMAGE_NAME: ubuntu-vscode-chrome
  VNC_CHROME_IMAGE_NAME: ubuntu-vnc-chrome
  GLOBAL_IMAGE_VERSION: 202011182106

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      # - name: Log into GitHub Container Registry
      #   run: echo "${{ secrets.CR_PAT }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build the VNC Docker image
      #   run: docker build . --file Dockerfile.ubuntu.xfce.vnc --tag $VNC_IMAGE_NAME

      # - name: Push VNC image to GitHub Container Registry
      #   run: |
      #     IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$VNC_IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "$default-branch" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$GLOBAL_IMAGE_VERSION
      #     docker tag $VNC_IMAGE_NAME $IMAGE_ID:$GLOBAL_IMAGE_VERSION
      #     docker push $IMAGE_ID:$GLOBAL_IMAGE_VERSION

      # - name: Build the ROS Docker image
      #   run: docker build . --file Dockerfile.ros.ubuntu --tag $ROS_IMAGE_NAME

      # - name: Push ROS image to GitHub Container Registry
      #   run: |
      #     IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$ROS_IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "$default-branch" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$GLOBAL_IMAGE_VERSION
      #     docker tag $ROS_IMAGE_NAME $IMAGE_ID:$GLOBAL_IMAGE_VERSION
      #     docker push $IMAGE_ID:$GLOBAL_IMAGE_VERSION

      # - name: Push ROS image to DockerHub Registry
      #   run: |
      #     IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$ROS_IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "$default-branch" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$GLOBAL_IMAGE_VERSION
      #     docker tag $ROS_IMAGE_NAME $IMAGE_ID:$GLOBAL_IMAGE_VERSION
      #     docker push $IMAGE_ID:$GLOBAL_IMAGE_VERSION

      # - name: Build the ROS VSCode Docker image
      #   run: |
      #     docker build . --file Dockerfile.ros.vscode --tag $ROS_VSCODE_IMAGE_NAME

      # - name: Push ROS VSCode image to GitHub Container Registry
      #   run: |
      #     IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$ROS_VSCODE_IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "$default-branch" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$GLOBAL_IMAGE_VERSION
      #     docker tag $ROS_VSCODE_IMAGE_NAME $IMAGE_ID:$GLOBAL_IMAGE_VERSION
      #     docker push $IMAGE_ID:$GLOBAL_IMAGE_VERSION

      # - name: Push ROS VSCode image to DockerHub Registry
      #   run: |
      #     IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$ROS_VSCODE_IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "$default-branch" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$GLOBAL_IMAGE_VERSION
      #     docker tag $ROS_VSCODE_IMAGE_NAME $IMAGE_ID:$GLOBAL_IMAGE_VERSION
      #     docker push $IMAGE_ID:$GLOBAL_IMAGE_VERSION

      # - name: Build the ROS AWS sample Docker image
      #   run: |
      #     docker build . --file Dockerfile.ros.aws.robomaker.sample --tag $ROS_AWS_SAMPLE_IMAGE_NAME
      #     docker run --rm --entrypoint cat $ROS_AWS_SAMPLE_IMAGE_NAME /headless/aws-robomaker-sample-application-helloworld/robot_ws/bundle/output.tar > ./robot_ws_output.tar
      #     docker run --rm --entrypoint cat $ROS_AWS_SAMPLE_IMAGE_NAME /headless/aws-robomaker-sample-application-helloworld/simulation_ws/bundle/output.tar > ./simulation_ws_output.tar

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: ros-output-artifacts
      #     path: |
      #       ./robot_ws_output.tar
      #       ./simulation_ws_output.tar

      # - name: Push VNC image to DockerHub Registry
      #   run: |
      #     IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$VNC_IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "$default-branch" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$GLOBAL_IMAGE_VERSION
      #     docker tag $VNC_IMAGE_NAME $IMAGE_ID:$GLOBAL_IMAGE_VERSION
      #     docker push $IMAGE_ID:$GLOBAL_IMAGE_VERSION

      # - name: Build the VSCode Chrome Docker image
      #   run: |
      #     docker build . --file Dockerfile.vscode.chrome --tag $VSCODE_CHROME_IMAGE_NAME

      # - name: Push VSCode Chrome image to GitHub Container Registry
      #   run: |
      #     IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$VSCODE_CHROME_IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "$default-branch" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$GLOBAL_IMAGE_VERSION
      #     docker tag $VSCODE_CHROME_IMAGE_NAME $IMAGE_ID:$GLOBAL_IMAGE_VERSION
      #     docker push $IMAGE_ID:$GLOBAL_IMAGE_VERSION

      # - name: Push VSCode Chrome image to DockerHub Registry
      #   run: |
      #     IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$VSCODE_CHROME_IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "$default-branch" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$GLOBAL_IMAGE_VERSION
      #     docker tag $VSCODE_CHROME_IMAGE_NAME $IMAGE_ID:$GLOBAL_IMAGE_VERSION
      #     docker push $IMAGE_ID:$GLOBAL_IMAGE_VERSION

      - name: Build the VNC Chrome Docker image
        run: docker build . --file Dockerfile.vnc.chrome --tag $VNC_CHROME_IMAGE_NAME

      # - name: Push VNC Chrome Docker image to GitHub Container Registry
      #   run: |
      #     IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$VNC_CHROME_IMAGE_NAME
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "$default-branch" ] && VERSION=latest
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$GLOBAL_IMAGE_VERSION
      #     docker tag $VNC_CHROME_IMAGE_NAME $IMAGE_ID:$GLOBAL_IMAGE_VERSION
      #     docker push $IMAGE_ID:$GLOBAL_IMAGE_VERSION

      - name: Push VNC Chrome Docker image to DockerHub Registry
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$VNC_CHROME_IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "$default-branch" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$GLOBAL_IMAGE_VERSION
          docker tag $VNC_CHROME_IMAGE_NAME $IMAGE_ID:$GLOBAL_IMAGE_VERSION
          docker push $IMAGE_ID:$GLOBAL_IMAGE_VERSION