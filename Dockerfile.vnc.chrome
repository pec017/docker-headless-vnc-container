# FROM ubuntu:18.04
# ENV USER=root
# ENV PASSWORD=password1
# ENV DEBIAN_FRONTEND=noninteractive
# ENV DEBCONF_NONINTERACTIVE_SEEN=true
# RUN apt-get update && \
# 	echo "tzdata tzdata/Areas select America" > ~/tx.txt && \
# 	echo "tzdata tzdata/Zones/America select New York" >> ~/tx.txt && \
# 	debconf-set-selections ~/tx.txt && \
# 	apt-get install -y abiword gnupg apt-transport-https wget software-properties-common ratpoison novnc websockify libxv1 libglu1-mesa xauth x11-utils xorg tightvncserver && \
# 	wget https://svwh.dl.sourceforge.net/project/virtualgl/2.6.3/virtualgl_2.6.3_amd64.deb && \
# 	wget https://iweb.dl.sourceforge.net/project/turbovnc/2.2.4/turbovnc_2.2.4_amd64.deb && \
# 	wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
# 	apt install -y ./google-chrome-stable_current_amd64.deb	&& \
# 	dpkg -i virtualgl_*.deb && \
# 	dpkg -i turbovnc_*.deb && \
# 	mkdir ~/.vnc/ && \
# 	echo $PASSWORD | vncpasswd -f > ~/.vnc/passwd && \
# 	chmod 0600 ~/.vnc/passwd && \
# 	echo "set border 1" > ~/.ratpoisonrc  && \
# 	echo "exec google-chrome --no-sandbox">> ~/.ratpoisonrc && \
# 	openssl req -x509 -nodes -newkey rsa:2048 -keyout ~/novnc.pem -out ~/novnc.pem -days 3650 -subj "/C=US/ST=NY/L=NY/O=NY/OU=NY/CN=NY emailAddress=email@example.com"
# EXPOSE 80
# CMD /opt/TurboVNC/bin/vncserver && websockify -D --web=/usr/share/novnc/ --cert=~/novnc.pem 80 localhost:5901 && tail -f /dev/null

# noVNC + TurboVNC + VirtualGL
# http://novnc.com
# https://turbovnc.org
# https://virtualgl.org

# xhost +si:localuser:root
# openssl req -new -x509 -days 365 -nodes -out self.pem -keyout self.pem
# docker build -t turbovnc .
# docker run --init --runtime=nvidia --name=turbovnc --rm -i -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 -p 5901:5901 turbovnc
# docker exec -ti turbovnc vglrun glxspheres64

# FROM nvidia/opengl:1.2-glvnd-devel-ubuntu18.04

# # SOURCEFORGE=https://svwh.dl.sourceforge.net
# ARG SOURCEFORGE=https://sourceforge.net/projects
# ARG TURBOVNC_VERSION=2.1.2
# ARG VIRTUALGL_VERSION=2.5.2
# ARG LIBJPEG_VERSION=1.5.2
# ARG WEBSOCKIFY_VERSION=0.8.0
# ARG NOVNC_VERSION=1.0.0-beta

# RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
#         ca-certificates \
#         curl \
#         gcc \
#         libc6-dev \
#         libglu1 \
#         libglu1:i386 \
#         libsm6 \
#         libxv1 \
#         libxv1:i386 \
# 	lubuntu-desktop xterm terminator mesa-utils \
#         make cmake \
#         python \
#         python-numpy \
#         x11-xkb-utils \
#         xauth \
#         xfonts-base \
#         xkb-data && \
#     rm -rf /var/lib/apt/lists/*

# RUN cd /tmp && \
#     curl -fsSL -O ${SOURCEFORGE}/turbovnc/files/${TURBOVNC_VERSION}/turbovnc_${TURBOVNC_VERSION}_amd64.deb \
#         -O ${SOURCEFORGE}/libjpeg-turbo/files/${LIBJPEG_VERSION}/libjpeg-turbo-official_${LIBJPEG_VERSION}_amd64.deb \
#         -O ${SOURCEFORGE}/virtualgl/files/${VIRTUALGL_VERSION}/virtualgl_${VIRTUALGL_VERSION}_amd64.deb \
#         -O ${SOURCEFORGE}/virtualgl/files/${VIRTUALGL_VERSION}/virtualgl32_${VIRTUALGL_VERSION}_amd64.deb && \
#     dpkg -i *.deb && \
#     rm -f /tmp/*.deb && \
#     sed -i 's/$host:/unix:/g' /opt/TurboVNC/bin/vncserver

# ENV PATH ${PATH}:/opt/VirtualGL/bin:/opt/TurboVNC/bin

# RUN curl -fsSL https://github.com/novnc/noVNC/archive/v${NOVNC_VERSION}.tar.gz | tar -xzf - -C /opt && \
#     curl -fsSL https://github.com/novnc/websockify/archive/v${WEBSOCKIFY_VERSION}.tar.gz | tar -xzf - -C /opt && \
#     mv /opt/noVNC-${NOVNC_VERSION} /opt/noVNC && \
#     mv /opt/websockify-${WEBSOCKIFY_VERSION} /opt/websockify && \
#     ln -s /opt/noVNC/vnc_lite.html /opt/noVNC/index.html && \
#     cd /opt/websockify && make

# # COPY self.pem /
# RUN curl -o /self.pem https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/self.pem

# RUN echo 'no-remote-connections\n\
# no-httpd\n\
# no-x11-tcp-connections\n\
# no-pam-sessions\n\
# permitted-security-types = otp\
# ' > /etc/turbovncserver-security.conf

# EXPOSE 5901
# ENV DISPLAY :1

# ENTRYPOINT ["/opt/websockify/run", "5901", "--cert=/self.pem", "--ssl-only", "--web=/opt/noVNC", "--wrap-mode=ignore", "--", "vncserver", ":1", "-securitytypes", "otp", "-otp"]
# #ENTRYPOINT ["/opt/websockify/run", "5901", "--cert=/self.pem", "--ssl-only", "--web=/opt/noVNC", "--wrap-mode=ignore", "--", "vncserver", ":1", "-securitytypes", "otp", "-otp", "-noxstartup"]

# noVNC + TurboVNC + VirtualGL
# Useful links for the software we are using:
# http://novnc.com
# https://turbovnc.org
# https://virtualgl.org

FROM nvidia/opengl:1.2-glvnd-devel-ubuntu18.04

ARG SOURCEFORGE=https://sourceforge.net/projects
ARG TURBOVNC_VERSION=2.1.2
ARG VIRTUALGL_VERSION=2.5.2
ARG LIBJPEG_VERSION=1.5.2
ARG WEBSOCKIFY_VERSION=0.8.0
ARG NOVNC_VERSION=1.0.0

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        ca-certificates \
        curl wget emacs vim less sudo lsof net-tools git htop gedit gedit-plugins \
	unzip zip psmisc xz-utils \
	libglib2.0-0 libxext6 libsm6 libxrender1 \
	libpython-dev libsuitesparse-dev libeigen3-dev libsdl1.2-dev doxygen graphviz libignition-math2-dev \
        gcc \
        libc6-dev \
        libglu1 \
        libglu1:i386 \
        libxv1 \
        libxv1:i386 \
	lubuntu-desktop xvfb xterm terminator zenity mesa-utils \
        make cmake \
        python \
        python-numpy \
        x11-xkb-utils \
        xauth \
        xfonts-base \
        xkb-data && \
    rm -rf /var/lib/apt/lists/*

RUN cd /tmp && \
    curl -fsSL -O ${SOURCEFORGE}/turbovnc/files/${TURBOVNC_VERSION}/turbovnc_${TURBOVNC_VERSION}_amd64.deb \
        -O ${SOURCEFORGE}/libjpeg-turbo/files/${LIBJPEG_VERSION}/libjpeg-turbo-official_${LIBJPEG_VERSION}_amd64.deb \
        -O ${SOURCEFORGE}/virtualgl/files/${VIRTUALGL_VERSION}/virtualgl_${VIRTUALGL_VERSION}_amd64.deb \
        -O ${SOURCEFORGE}/virtualgl/files/${VIRTUALGL_VERSION}/virtualgl32_${VIRTUALGL_VERSION}_amd64.deb && \
    dpkg -i *.deb && \
    rm -f /tmp/*.deb && \
    sed -i 's/$host:/unix:/g' /opt/TurboVNC/bin/vncserver

# Install miniconda
RUN cd /tmp && \
    curl -fsSL -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    chmod u+x Miniconda3-latest-Linux-x86_64.sh && \
    ./Miniconda3-latest-Linux-x86_64.sh -b

ENV PATH ${PATH}:/opt/VirtualGL/bin:/opt/TurboVNC/bin

RUN curl -fsSL https://github.com/novnc/noVNC/archive/v${NOVNC_VERSION}.tar.gz | tar -xzf - -C /opt && \
    curl -fsSL https://github.com/novnc/websockify/archive/v${WEBSOCKIFY_VERSION}.tar.gz | tar -xzf - -C /opt && \
    mv /opt/noVNC-${NOVNC_VERSION} /opt/noVNC && \
    chmod -R a+w /opt/noVNC && \
    mv /opt/websockify-${WEBSOCKIFY_VERSION} /opt/websockify && \
    cd /opt/websockify && make && \
    cd /opt/noVNC/utils && \
    ln -s /opt/websockify

# COPY xorg.conf /etc/X11/xorg.conf
# COPY index.html /opt/noVNC/index.html

RUN curl -o /etc/X11/xorg.conf https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/xorg.conf
RUN curl -o /opt/noVNC/index.html https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/index.html

# Defeat screen locking and power management
RUN mv /etc/xdg/autostart/light-locker.desktop /etc/xdg/autostart/light-locker.desktop_bak
RUN mv /etc/xdg/autostart/xfce4-power-manager.desktop /etc/xdg/autostart/xfce4-power-manager.desktop_bak

# Expose whatever port NoVNC will serve from. In our case it will be 40001, see ./start_desktop.sh
EXPOSE 40001
ENV DISPLAY :1

# Install desktop file for this user
RUN mkdir -p /root/Desktop
# COPY ./firefox.desktop_applications /usr/share/applications/firefox.desktop
# COPY ./terminator.desktop /root/Desktop
RUN curl -o /usr/share/applications/firefox.desktop https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/firefox.desktop_applications
RUN curl -o /root/Desktop/terminator.desktop https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/terminator.desktop

RUN mkdir -p /root/.config/terminator
# COPY ./terminator_config /root/.config/terminator/config
# COPY ./firefox.desktop /root/Desktop
# COPY ./galculator.desktop /root/Desktop
# COPY ./htop.desktop /root/Desktop
# COPY ./self.pem /root/self.pem
RUN curl -o /root/.config/terminator/config https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/terminator_config
RUN curl -o /root/Desktop/firefox.desktop https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/firefox.desktop
RUN curl -o /root/Desktop/galculator.desktop https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/galculator.desktop
RUN curl -o /root/Desktop/htop.desktop https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/htop.desktop
RUN curl -o /root/self.pem https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/self.pem

# Precede bash on all new terminator shells with vglrun so that 3d graphics apps will use the GPU
RUN perl -pi -e 's/^Exec=terminator$/Exec=terminator -e "vglrun bash"/g' /usr/share/applications/terminator.desktop

# Install udacity desktop background (YMMV)
# COPY ./background.png /usr/share/lubuntu/wallpapers/1604-lubuntu-default-wallpaper.png
RUN curl -o /usr/share/lubuntu/wallpapers/1604-lubuntu-default-wallpaper.png https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/background.png

RUN mkdir -p /root/.vnc
# COPY ./xstartup.turbovnc /root/.vnc/xstartup.turbovnc
RUN curl -o /root/.vnc/xstartup.turbovnc https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/xstartup.turbovnc
RUN chmod a+x /root/.vnc/xstartup.turbovnc

# Install ROS
# RUN echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > \
#     /etc/apt/sources.list.d/ros-latest.list && \
#     apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116 && \
#     apt-get update -y && \
#     apt-get install -y ros-kinetic-desktop-full && \
#     apt-get install -y ros-kinetic-navigation && \
#     apt-get install -y ros-kinetic-roscpp && \
#     apt-get install -y ros-kinetic-joy && \
#     apt-get install -y ros-kinetic-kobuki-safety-controller && \
#     apt-get install -y ros-kinetic-yocs-velocity-smoother && \
#     apt-get install -y ros-kinetic-turtlebot-bringup && \
#     apt-get install -y ros-kinetic-geometry-msgs && \
#     apt-get install -y ros-kinetic-yocs-cmd-vel-mux && \
#     apt-get install -y ros-kinetic-diagnostic-aggregator && \
#     apt-get install -y ros-kinetic-depthimage-to-laserscan && \
#     apt-get install -y ros-kinetic-gazebo-ros && \
#     apt-get install -y ros-kinetic-kobuki-gazebo-plugins && \
#     apt-get install -y ros-kinetic-robot-pose-ekf && \
#     apt-get install -y ros-kinetic-robot-state-publisher && \
#     apt-get install -y ros-kinetic-turtlebot-description && \
#     apt-get install -y ros-kinetic-turtlebot-navigation && \
#     apt-get install -y ros-kinetic-xacro && \
#     rosdep init && \
#     rosdep update && \
#     echo "source /opt/ros/kinetic/setup.bash" >> /root/.bashrc

RUN apt update \
    && apt install -y dirmngr lsb-release iputils-ping curl wget htop git ssh sudo procps vim dumb-init \
    # && sh -c '. /etc/lsb-release && echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' \
    && sh -c '. /etc/lsb-release && echo "deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main" > /etc/apt/sources.list.d/ros-latest.list' \
    && apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 \
    && apt update \
    && apt install -y ros-melodic-desktop-full \
    && apt install -y python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential python3-vcstool python3-colcon-common-extensions python3-apt python3-pip \
    && pip3 install -U setuptools pip \
    && pip3 install --no-cache-dir colcon-ros-bundle s3cmd \
    && apt autoclean -y \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/* \
    && wget https://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add - \
    && echo "source /opt/ros/melodic/setup.bash" >> /root/.bashrc

# Upgrade gazebo to gazebo v7
RUN sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" > /etc/apt/sources.list.d/gazebo-stable.list'
RUN wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add -
RUN apt-get update -y && apt-get install -y gazebo7

# Add miniconda to root's PATH
RUN echo "export PATH=/root/miniconda3:$PATH" >> /root/.bashrc

# Create some useful default aliases
RUN printf "%s\n" \
           "alias cp=\"cp -i\"" \
           "alias mv=\"mv -i\"" \
           "alias rm=\"rm -i\"" >> /root/.bash_aliases

# COPY start_desktop.sh /usr/local/bin/start_desktop.sh
RUN curl -o /usr/local/bin/start_desktop.sh https://raw.githubusercontent.com/willkessler/nvidia-docker-novnc/master/autonomous_sys_build/start_desktop.sh

CMD /usr/local/bin/start_desktop.sh